//
//  CurrenciesViewController.swift
//  test
//
//  Created by Daniel Salhuana on 4/7/20.
//  Copyright (c) 2020 Daniel Salhuana. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CurrenciesDisplayLogic: class {
    func displaySomething(viewModel: Currencies.Something.ViewModel)
    func displayCurrencies(viewModel: Currencies.LoadCurrency.ViewModel)
}

class CurrenciesViewController: UIViewController, CurrenciesDisplayLogic {
    var interactor: CurrenciesBusinessLogic?
    var router: (NSObjectProtocol & CurrenciesRoutingLogic & CurrenciesDataPassing)?
    var currenciesView = CurrenciesView ()
    var currenciesViewModel = [CurrencyViewModel]()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = CurrenciesInteractor()
        let presenter = CurrenciesPresenter()
        let router = CurrenciesRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func loadView() {
        view = currenciesView
        currenciesView.tableView.dataSource = self
        currenciesView.tableView.delegate = self
        currenciesView.tableView.register(CurrencyTableViewCell.self, forCellReuseIdentifier: CurrencyTableViewCell.identifier)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        interactor?.doLoadCurrencies(request: Currencies.LoadCurrency.Request())
    }
    
    // MARK: Do Display
    
    func displaySomething(viewModel: Currencies.Something.ViewModel) {
        //nameTextField.text = viewModel.name
    }
    
    func displayCurrencies(viewModel: Currencies.LoadCurrency.ViewModel) {
        currenciesViewModel = viewModel.currencies
        currenciesView.tableView.reloadData()
    }
}

extension CurrenciesViewController: UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return currenciesViewModel.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = currenciesView.tableView.dequeueReusableCell(withIdentifier: CurrencyTableViewCell.identifier, for: indexPath) as? CurrencyTableViewCell else {
            return UITableViewCell()
        }
        let isTheLast = indexPath.row == (currenciesViewModel.count - 1)
        cell.setupCell(isTheLast: isTheLast, viewModel: currenciesViewModel[indexPath.row])
        return cell
    }
}

extension CurrenciesViewController: UITableViewDelegate {
    
}
