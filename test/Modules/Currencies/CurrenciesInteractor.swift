//
//  CurrenciesInteractor.swift
//  test
//
//  Created by Daniel Salhuana on 4/7/20.
//  Copyright (c) 2020 Daniel Salhuana. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CurrenciesBusinessLogic {
    func doLoadCurrencies(request: Currencies.LoadCurrency.Request)
    func doSaveTheCurrencySelected(request: Currencies.CurrencySelected.Request)
}

protocol CurrenciesDataStore {
    var currencies: [Currency]? { get set }
    var currencySelected: Currency? { get set }
}

class CurrenciesInteractor: CurrenciesBusinessLogic, CurrenciesDataStore {
    var presenter: CurrenciesPresentationLogic?
    var currencies: [Currency]?
    var currencySelected: Currency?
    
    func doLoadCurrencies(request: Currencies.LoadCurrency.Request) {
        guard let currencies = currencies else {
            return
        }
        
        let response = Currencies.LoadCurrency.Response(currencies: currencies)
        presenter?.presentCurrencies(response: response)
    }
    
    func doSaveTheCurrencySelected(request: Currencies.CurrencySelected.Request) {
        self.currencySelected = currencies?.first(where: { (currency) -> Bool in
            return currency.iso == request.isoCurrency
        })
        let response = Currencies.CurrencySelected.Response()
        presenter?.presentCurrencySelectedSaved(response: response)
    }
    
}
