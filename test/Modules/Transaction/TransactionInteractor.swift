//
//  TransactionInteractor.swift
//  test
//
//  Created by Daniel Salhuana on 4/6/20.
//  Copyright (c) 2020 Daniel Salhuana. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TransactionBusinessLogic {
    func loadCurrencies(request: Transaction.CurrencyLoad.Request)
}

protocol TransactionDataStore {
    //var name: String { get set }
}

class TransactionInteractor: TransactionBusinessLogic, TransactionDataStore {
    var presenter: TransactionPresentationLogic?
    var worker: TransactionWorker? = TransactionWorker()
    var currencies = [Currency]()
    
    private let isoSoles = "PEN"
    private let isoDollar = "USD"
    private var source: Currency? = nil
    private var target: Currency? = nil
    
    func loadCurrencies(request: Transaction.CurrencyLoad.Request) {
        worker?.doGetConversionRate(completionHandler: {[weak self] (data) in
            guard let data = data, let welf = self else {
                //LLAMAR PRESENTER ERROR
                return
            }
            welf.currencies = welf.worker?.doParseConversionRates(data: data) ?? []
            validateCurrencies()
        })
    }
    
    private func validateCurrencies() {
        guard let source = getCurrencyByIso(currencies: currencies, iso: isoSoles), let target = getCurrencyByIso(currencies: currencies, iso: isoDollar) else {
            //LLAMAR PRESENTER ERROR
            return
        }
        self.source = source
        self.target = target
        let response = Transaction.CurrencyLoad.Response(source: source, target: target)
        presenter?.presentLoaded(response: response)
    }
    
    private func getCurrencyByIso(currencies: [Currency], iso: String) -> Currency? {
        return currencies.first { (currency) -> Bool in
            return currency.iso == iso
        }
    }
}
