//
//  TransactionPresenter.swift
//  test
//
//  Created by Daniel Salhuana on 4/6/20.
//  Copyright (c) 2020 Daniel Salhuana. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TransactionPresentationLogic {
    func presentError(response: Transaction.Error.Response)
    func presentLoaded(response: Transaction.CurrencyLoad.Response)
    func presentAccountChanged(response: Transaction.AmountChange.Response)
}

class TransactionPresenter: TransactionPresentationLogic {
    weak var viewController: TransactionDisplayLogic?
    
    func presentError(response: Transaction.Error.Response) {
        switch response.errorType {
        case .emptyCurrency:
            break
        case .noLocalCurrency:
            break
        case .notDollarCurrency:
            break
        case .notLoad:
            break
        }
    }
    
    func presentLoaded(response: Transaction.CurrencyLoad.Response) {
        let source = response.source
        let target = response.target
        let buyRate = source.buyRate.getMoneyValue(symbol: source.symbol)
        let sellRate = source.sellRate.getMoneyValue(symbol: source.symbol)
        let sourceInput = InputViewModel(optionType: .source, currencyName: source.currencyName, symbol: source.symbol)
        let targetInput = InputViewModel(optionType: .target, currencyName: target.currencyName, symbol: target.symbol)
        let transactionViewModel = TransactionViewModel(sourceInput: sourceInput, targetInput: targetInput, buyRate: buyRate, sellRate: sellRate)
        let viewModel = Transaction.CurrencyLoad.ViewModel(transactionViewModel: transactionViewModel)
        viewController?.displayCurrencyLoaded(viewModel: viewModel)
    }
    
    func presentAccountChanged(response: Transaction.AmountChange.Response) {
        let viewModel = Transaction.AmountChange.ViewModel(amountChanged: response.amountChanged.getMoneyValue())
        viewController?.displayAccountChanged(viewModel: viewModel)
    }
}
